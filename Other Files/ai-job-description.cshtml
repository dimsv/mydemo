@using System.Dynamic
@using Newtonsoft.Json
@using RestSharp
@using RestSharp.Authenticators
@{
    var jobTitle = Request["jobTitle"];
    var writingStyle = Request["style"].AsInt(1);
    var targetLanguage = Request["lang"];

    dynamic response = new ExpandoObject();

    // jobTitle = "Αποθηκαριος";
    // targetLanguage = "en";



    //Get me a detailed job ad up to 180 words for a Assistant accountant position
    // Get me a detailed job ad up to 200 words for a back-end engineer position. Generate relevant html code with bullet points.
    // Get me a rejection letter to candidate that will not proceedd up to 130 words.


    /**

    var jobTitleLanguage = DetectLanguage(jobTitle, .7m);

    if (jobTitleLanguage != "en")
    {
        // jobTitle = TranslateText(jobTitle, jobTitleLanguage, "en");
    }

     **/




    var writingStylePrompt = "";
    if (writingStyle == 1)
    {
        writingStylePrompt = "formal";
    }
    else if (writingStyle == 2)
    {
        writingStylePrompt = "casual";
    }
    else
    {
        writingStylePrompt = "formal";
    }


    var jobDescription = AzureOpenAI($"Write a job advert for {jobTitle} up to 200 words with a {writingStylePrompt} writing style. Generate html code {(writingStyle==1 ? "with bullet points" : "")}.");


    if (!String.IsNullOrEmpty(jobDescription))
    {
        if (targetLanguage != "en")
        {
            jobDescription = TranslateText(jobDescription, "en", targetLanguage);
        }
        response.result = "Success";
        response.jobDescription = jobDescription;
    }
    else
    {
        response.result = "Error";
        response.jobDescription = "";
    }

    Response.ContentType = "application/json";
    Response.Write(JsonConvert.SerializeObject(response));



}



@functions {


    public static string OpenAi(string promptText)
    {
        WebClient client = new WebClient();
        client.Headers[HttpRequestHeader.ContentType] = "application/json";
        client.Headers[HttpRequestHeader.Authorization] = "Bearer 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";
        client.Encoding = System.Text.Encoding.UTF8;
        string baseUrl = "https://api.openai.com/v1/chat/completions";
        dynamic postData = new ExpandoObject();
        var messages = new List<dynamic>();
        dynamic message = new ExpandoObject();
        message.role = "assistant";
        message.content = promptText;
        messages.Add(message);
        postData.model = "gpt-3.5-turbo";
        //postData.model = "gpt-4";
        postData.temperature = 0.7;
        postData.messages = messages;

        var requestStr = JsonConvert.SerializeObject(postData);
        var responseStr = "";
        try
        {
            responseStr = client.UploadString(baseUrl, "POST", requestStr);
        }
        catch (WebException ex)
        {
            //responseStr = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
            //responseStr = "";
        }
        string returnValue = "";

        if (!String.IsNullOrEmpty(responseStr))
        {
            var jsonData = Json.Decode(responseStr);



            if (jsonData.choices != null)
            {
                returnValue = jsonData.choices[0].message.content;
            }
        }

        //returnValue = responseStr;

        return returnValue;
    }



    public static string AzureOpenAI(string promptText)
    {

        System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        var client = new RestClient("https://esrdai.openai.azure.com/openai/deployments/");
        var request = new RestRequest($"/gpt-35-turbo/chat/completions?api-version=2023-07-01-preview", Method.POST);
        request.AddHeader("api-key", "67e521491b0442698c908a7cfda0f96d");
        request.AddHeader("Content-Type", "application/json");

        dynamic postData = new ExpandoObject();
        var messages = new List<dynamic>();
        dynamic message = new ExpandoObject();
        message.role = "assistant";
        message.content = promptText;
        messages.Add(message);

        postData.messages = messages;

        postData.max_tokens = 800;
        postData.temperature = .7;
        postData.frequency_penalty = 0;
        postData.presence_penalty = 0;
        postData.top_p = .95;
        postData.stop = null;

        var requestBody = JsonConvert.SerializeObject(postData);
        request.AddParameter("application/json", requestBody, ParameterType.RequestBody);
        IRestResponse response = client.Execute(request);
        string responseStr = response.Content;

        var jsonData = Json.Decode(responseStr);

        var returnValue = "";

        if (jsonData.choices != null)
        {
            returnValue = jsonData.choices[0].message.content;
        }


        return returnValue;
    }





    public static string TranslateText(string textToTranslate, string fromLanguage, string toLanguage)
    {
        var returnValue = "";
        System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        var client = new RestClient("https://api.cognitive.microsofttranslator.com/");
        var request = new RestRequest($"/translate?api-version=3.0&from={fromLanguage}&to={toLanguage}", Method.POST);
        request.AddHeader("Ocp-Apim-Subscription-Key", "1202a96ee1e24c3f965fcedc36d3ad6f");
        request.AddHeader("Ocp-Apim-Subscription-Region", "westeurope");
        object[] body = new object[] { new { Text = textToTranslate } };
        var requestBody = JsonConvert.SerializeObject(body);
        request.AddParameter("application/json", requestBody, ParameterType.RequestBody);
        IRestResponse response = client.Execute(request);
        string content = response.Content;
        var jsonResponse = Json.Decode(content);
        if (jsonResponse != null)
        {
            if (jsonResponse[0].translations != null)
            {
                returnValue = jsonResponse[0].translations[0].text;
            }
        }
        return returnValue;
    }




    public static string DetectLanguage(string textToDetect, decimal confidenceThreshold)
    {
        var returnValue = "";
        System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        var client = new RestClient("https://amigo-language.cognitiveservices.azure.com/");
        var request = new RestRequest($"/text/analytics/v3.0/languages", Method.POST);
        request.AddHeader("Ocp-Apim-Subscription-Key", "7cf384720d5040659aa3ba7bd78431bc");
        request.AddHeader("Ocp-Apim-Subscription-Region", "westeurope");


        dynamic req = new ExpandoObject();
        List<dynamic> texts = new List<dynamic>();
        dynamic text = new ExpandoObject();
        text.id = "1";
        text.text = textToDetect;
        texts.Add(text);
        req.documents = texts;
        var requestBody = JsonConvert.SerializeObject(req);
        request.AddParameter("application/json", requestBody, ParameterType.RequestBody);
        IRestResponse response = client.Execute(request);
        string content = response.Content;
        var jsonResponse = Json.Decode(content);
        if (jsonResponse != null)
        {
            if (jsonResponse.documents != null)
            {
                var detectedLanguage = jsonResponse.documents[0].detectedLanguage.iso6391Name;
                var confidenceScore = jsonResponse.documents[0].detectedLanguage.confidenceScore;

                if (detectedLanguage.Length == 2 & confidenceScore >= confidenceThreshold)
                {
                    returnValue = detectedLanguage;
                }


            }
        }

        return returnValue;
    }


}