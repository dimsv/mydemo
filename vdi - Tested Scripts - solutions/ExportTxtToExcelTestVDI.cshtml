@using System;
@using System.Dynamic;
@using System.Text.RegularExpressions;
@using System.Web.UI.WebControls

@{
    if (!WebSecurity.IsAuthenticated) { Response.Redirect("~/account/login?ReturnUrl=" + Request.Url.ToString()); }

    string u = Request.ServerVariables["HTTP_USER_AGENT"];
    Regex b = new Regex(@"(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino", RegexOptions.IgnoreCase | RegexOptions.Multiline);
    Regex v = new Regex(@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-", RegexOptions.IgnoreCase | RegexOptions.Multiline);
    if (!String.IsNullOrEmpty(u))
    {
        if ((b.IsMatch(u) || v.IsMatch(u.Substring(0, 4))))
        {
            Response.Redirect("~/mobile/");
        }
    }

    var applicationId = Request["id"].AsInt(0);

    var pageSize = 20;
    var totalPages = 0;
    int count = 0;
    var page = Request["page"].AsInt(1);
    var offset = (page - 1) * pageSize;

    var areaField = "";
    var areaAdminField = "";

    var db = Database.Open("smartcv");

    //Page.ValidateRequest = false;


    var currentLogin = db.QuerySingle("SELECT * FROM logins JOIN customers ON (lCustomerId=cId) WHERE lId=@0",
      WebSecurity.CurrentUserId);
    var currentCustomerId = currentLogin.lCustomerId;
    var userPrefs = SmartCV.GetUserPrefs(WebSecurity.CurrentUserId);
    var uiTerms = Utils.GetTerms(userPrefs.uiLanguage);

    Layout = "~/_Layout.cshtml";
    Page.Title = uiTerms["lblHome"] + " - Worklife Recruit (ex SmartCV)";

    var sortOrder = Request.QueryString["sort"].AsInt(0);
    var sortField = "";
    var sortFieldDisplayName = "";
    if (sortOrder == 0)
    {
        sortField = "jCreatedDateTime DESC";
        sortFieldDisplayName = uiTerms["lblRecentlyCreated"];
    }
    else if (sortOrder == 1)
    {
        sortField = "jTitle ASC";
        sortFieldDisplayName = uiTerms["lblTitle"];
    }

    var validLogins = db.Query(@"SELECT lid FROM logins where lcustomerid
IN (SELECT lcustomerid FROM logins WHERE lid=@0)", currentLogin.lId);


}

@section pageheader {
    @PageHelpers.PageHeader(Page.Title)
}

<script src="~/Scripts/jquery.validate.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>

@*<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/select2.min.js"></script>*@

<script src="~/global_assets/js/plugins/forms/styling/uniform.min.js"></script>
<script src="~/global_assets/js/demo_pages/login.js"></script>
<script src="~/assets/js/app.js"></script>
<script src="~/global_assets/js/demo_pages/form_checkboxes_radios.js"></script>

<!-- Pane includes -->

<script src="~/Scripts/jquery-circle-progress/dist/circle-progress.min.js"></script>
<script src="~/Scripts/star-rating-svg/jquery.star-rating-svg.min.js"></script>
<link href="~/Scripts/star-rating-svg/star-rating-svg.css" rel="stylesheet" />

<link href="~/Scripts/tagsinput/bootstrap-tagsinput.css" rel="stylesheet" />
<link href="~/Scripts/tagsinput/bootstrap-tagsinput-typeahead.css" rel="stylesheet" />

<script src="~/Scripts/tagsinput/bootstrap-tagsinput.min.js"></script>

<script src="~/global_assets/js/plugins/forms/inputs/typeahead/typeahead.bundle.min.js"></script>
@*<script src="http://malsup.github.com/jquery.form.js"></script>*@
<script src="~/Scripts/jquery.form.js"></script>
<script src="~/global_assets/js/plugins/notifications/pnotify.min.js"></script>
<script src="~/Scripts/jquery-ias.min.js"></script>

<script>
  $("#breadcrumb").html('<a href="/" class="breadcrumb-item active"><i class="icon-home2 mr-2 "></i> @uiTerms["lblHome"]</a>');
  $("#topnav_home").addClass("active");
</script>








@*Export txt to Excel*@
@*Manage NuGets -> Install EPPlus*@
@*Find more for EPPlus -> link https://epplussoftware.com/developers/licenseexception*@
@*move the demo txt file to this path "~/App_Data/Demo Positions Excel Export.txt"*@
@*copy paste the "ExportTxtToExcelTestVDI.cshtml" file into smartcv-app solution. (it is a copy from default page)*@

@using OfficeOpenXml
@functions {


    void ExportTxtToExcel()
    {
        string txtFilePath = GenerateSampleTextFile();

        TransformTxtToExcel(txtFilePath);
    }



    string GenerateSampleTextFile()
    {
        string filePath = Server.MapPath("~/App_Data/Demo Positions Excel Export.txt");



        return filePath;
    }




    void TransformTxtToExcel(string txtFilePath)
    {
        string excelFilePath = Server.MapPath("~/App_Data/data.xlsx");
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (var reader = new StreamReader(txtFilePath))
        {
            using (var package = new ExcelPackage(new FileInfo("data.xlsx")))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Data");

                int row = 1;
                while (!reader.EndOfStream)
                {
                    string line = reader.ReadLine();
                    string[] values = line.Split('\t');

                    for (int col = 0; col < values.Length; col++)
                    {
                        worksheet.Cells[row, col + 1].Value = values[col];
                    }
                    row++;
                }

                FileInfo excelFile = new FileInfo(excelFilePath);
                package.SaveAs(excelFile);

                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment; filename=data.xlsx");
                Response.WriteFile(excelFile.FullName);
                Response.End();
            }
        }
    }


}



<h1>Export Data to Excel</h1>

<form method="post">
    <input type="submit" value="Export to Excel" name="exportBtn" />
</form>

@if (IsPost && Request["exportBtn"] != null)
{
    ExportTxtToExcel();
}










